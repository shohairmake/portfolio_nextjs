{"version":3,"file":"static/webpack/static/development/pages/contact.js.7541240645e2db0e00fb.hot-update.js","sources":["webpack:///./src/components/form/FormUserDetails.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Formik, Form, Field } from 'formik'\nimport TextField from '@material-ui/core/TextField'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Button } from '@material-ui/core'\nimport * as yup from 'yup'\n\nconst useStyles = makeStyles((theme) => ({\n    hello: {\n        fontSize: '3em',\n        fontWeight: '100',\n        letterSpacing: '0.5em',\n        '@media (max-width:600px)': {\n            fontSize: '2em',\n            letterSpacing: '0.1em',\n        },\n    },\n    form: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100%',\n        width: '80%',\n        '& div': {\n            marginTop: '36px',\n            marginBottom: '16px',\n        },\n    },\n    buttonWrapper: {\n        height: '200px',\n    },\n    button: {\n        fontSize: '1.5em',\n        fontWeight: '100',\n        opacity: '0.7',\n        margin: theme.spacing(3),\n    },\n}))\n\nconst validationSchema = yup.object({\n    firstName: yup.string().required('First Name is required').max(20),\n    lastName: yup.string().required('Last Name is required').max(20),\n    email: yup.string().email('Invalid email').required('Email is required'),\n    message: yup.string().required('Message is required'),\n})\n\nexport const FormUserDetails = ({ formData, setFormData, nextStep }) => {\n    const classes = useStyles()\n    return (\n        <>\n            <h1 className={classes.hello}>Please Say Hello</h1>\n            <Formik\n                initialValues={formData}\n                onSubmit={(values) => {\n                    setFormData(values)\n                    nextStep()\n                }}\n                validationSchema={validationSchema}\n            >\n                {({ errors, touched }) => (\n                    <Form className={classes.form}>\n                        <Field\n                            name=\"firstName\"\n                            label=\"First Name *\"\n                            margin=\"normal\"\n                            fullWidth={true}\n                            as={TextField}\n                            error={touched.firstName && errors.firstName}\n                            helperText={touched.firstName && errors.firstName}\n                        />\n                        <Field\n                            name=\"lastName\"\n                            label=\"Last Name *\"\n                            margin=\"normal\"\n                            fullWidth={true}\n                            as={TextField}\n                            error={touched.lastName && errors.lastName}\n                            helperText={touched.lastName && errors.lastName}\n                        />\n                        <Field\n                            type=\"email\"\n                            name=\"email\"\n                            label=\"Email *\"\n                            margin=\"normal\"\n                            fullWidth={true}\n                            as={TextField}\n                            error={touched.email && errors.email}\n                            helperText={touched.email && errors.email}\n                        />\n                        <Field\n                            type=\"message\"\n                            name=\"message\"\n                            label=\"message *\"\n                            margin=\"normal\"\n                            as={TextField}\n                            multiline={true}\n                            rows={5}\n                            fullWidth={true}\n                            error={touched.message && errors.message}\n                            helperText={touched.message && errors.message}\n                        />\n                        <div className={classes.buttonWrapper}>\n                            <Button\n                                type=\"submit\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className={classes.button}\n                            >\n                                Continue\n                            </Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n        </>\n    )\n}\n\nFormUserDetails.propTypes = {\n    formData: PropTypes.object.isRequired,\n    setFormData: PropTypes.func.isRequired,\n    nextStep: PropTypes.func.isRequired,\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAPA;AAYA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAzBA;AAAA;AAiCA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA3CA;AAyDA;AAEA;AACA;AACA;AACA;AAHA;;;;A","sourceRoot":""}